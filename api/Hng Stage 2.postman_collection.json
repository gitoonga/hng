{
	"info": {
		"_postman_id": "5792d5e4-5587-4289-b2b7-ee453c2d7311",
		"name": "Hng Stage 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28667434"
	},
	"item": [
		{
			"name": "Test Insert Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test('Response has the required field - message', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"})",
							"",
							"pm.test('The message is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Response time is less than 500ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Test New\",\"phone\":\"725530178\",\"email\":\"new@example.com\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{$urlroot}}/api/",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Sql Injection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test('Response has required field \\'message\\'', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.exist;",
							"})",
							"",
							"pm.test('The message should be a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Response time is less than 500ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test('Checks response for WHERE clause sql injection', function () {",
							"    if (pm.response.text().toLowerCase().includes('error')) {",
							"        text = 'Maybe your API is vulnerable to SQL injection vulnerability which allows the retrieval of hidden data';",
							"    }",
							"    pm.expect(pm.response.text().toLowerCase()).to.not.include('error');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Julius Test Sql\",\"phone\":\"254725530198'--\",\"email\":\"mjulius05@gmail.com \"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{$urlroot}}/api/",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Update Data with one variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Message field is present in the response', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"})",
							"",
							"pm.test('Message field is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Response time is in an acceptable range', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test('Request was successfully processed', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    pm.expect(pm.response.json().message).to.equal('Person updated successfully');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Julius Test Patch\"}"
				},
				"url": {
					"raw": "{{$urlroot}}/api/1",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Update Data with all variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"})",
							"",
							"pm.test('Message is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Response time is in an acceptable range', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Julius Test Patch\",\"phone\":\"254725530198\",\"email\":\"test@gmail.com\"}"
				},
				"url": {
					"raw": "{{$urlroot}}/api/10",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Update Data with no variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 400', function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"})",
							"",
							"pm.test('Response has the required field - message', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"})",
							"",
							"pm.test('Message is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Response time is in an acceptable range', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{$urlroot}}/api/1",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Get Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{$urlroot}}/api/TEST NAME",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						"TEST NAME"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Delete Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the expected message field\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{$urlroot}}/api/11",
					"host": [
						"{{$urlroot}}"
					],
					"path": [
						"api",
						"11"
					]
				}
			},
			"response": []
		}
	]
}